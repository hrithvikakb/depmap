// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/flow/flow.proto

package flow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlowService_GetFlows_FullMethodName = "/flow.FlowService/GetFlows"
)

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowServiceClient interface {
	// GetFlows streams observed flows
	GetFlows(ctx context.Context, in *GetFlowsRequest, opts ...grpc.CallOption) (FlowService_GetFlowsClient, error)
}

type flowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowServiceClient(cc grpc.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) GetFlows(ctx context.Context, in *GetFlowsRequest, opts ...grpc.CallOption) (FlowService_GetFlowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowService_ServiceDesc.Streams[0], FlowService_GetFlows_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flowServiceGetFlowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowService_GetFlowsClient interface {
	Recv() (*Flow, error)
	grpc.ClientStream
}

type flowServiceGetFlowsClient struct {
	grpc.ClientStream
}

func (x *flowServiceGetFlowsClient) Recv() (*Flow, error) {
	m := new(Flow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlowServiceServer is the server API for FlowService service.
// All implementations must embed UnimplementedFlowServiceServer
// for forward compatibility
type FlowServiceServer interface {
	// GetFlows streams observed flows
	GetFlows(*GetFlowsRequest, FlowService_GetFlowsServer) error
	mustEmbedUnimplementedFlowServiceServer()
}

// UnimplementedFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServiceServer struct {
}

func (UnimplementedFlowServiceServer) GetFlows(*GetFlowsRequest, FlowService_GetFlowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFlows not implemented")
}
func (UnimplementedFlowServiceServer) mustEmbedUnimplementedFlowServiceServer() {}

// UnsafeFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServiceServer will
// result in compilation errors.
type UnsafeFlowServiceServer interface {
	mustEmbedUnimplementedFlowServiceServer()
}

func RegisterFlowServiceServer(s grpc.ServiceRegistrar, srv FlowServiceServer) {
	s.RegisterService(&FlowService_ServiceDesc, srv)
}

func _FlowService_GetFlows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFlowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowServiceServer).GetFlows(m, &flowServiceGetFlowsServer{stream})
}

type FlowService_GetFlowsServer interface {
	Send(*Flow) error
	grpc.ServerStream
}

type flowServiceGetFlowsServer struct {
	grpc.ServerStream
}

func (x *flowServiceGetFlowsServer) Send(m *Flow) error {
	return x.ServerStream.SendMsg(m)
}

// FlowService_ServiceDesc is the grpc.ServiceDesc for FlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFlows",
			Handler:       _FlowService_GetFlows_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/flow/flow.proto",
}
