// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/flow/flow.proto

package flow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flow represents a network flow between two endpoints
type Flow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// L3 (IP) information
	SourceIp      string `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	DestinationIp string `protobuf:"bytes,2,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	// L4 (TCP/UDP) information
	SourcePort      uint32 `protobuf:"varint,3,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort uint32 `protobuf:"varint,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// Protocol information
	L4Protocol string `protobuf:"bytes,5,opt,name=l4_protocol,json=l4Protocol,proto3" json:"l4_protocol,omitempty"` // TCP/UDP
	L7Protocol string `protobuf:"bytes,6,opt,name=l7_protocol,json=l7Protocol,proto3" json:"l7_protocol,omitempty"` // HTTP/gRPC/etc
	// Kubernetes metadata
	SourcePod               string `protobuf:"bytes,7,opt,name=source_pod,json=sourcePod,proto3" json:"source_pod,omitempty"`
	SourceNamespace         string `protobuf:"bytes,8,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	SourceWorkload          string `protobuf:"bytes,9,opt,name=source_workload,json=sourceWorkload,proto3" json:"source_workload,omitempty"`                // deployment/statefulset/etc name
	SourceWorkloadKind      string `protobuf:"bytes,10,opt,name=source_workload_kind,json=sourceWorkloadKind,proto3" json:"source_workload_kind,omitempty"` // Deployment/StatefulSet/etc
	DestinationPod          string `protobuf:"bytes,11,opt,name=destination_pod,json=destinationPod,proto3" json:"destination_pod,omitempty"`
	DestinationNamespace    string `protobuf:"bytes,12,opt,name=destination_namespace,json=destinationNamespace,proto3" json:"destination_namespace,omitempty"`
	DestinationWorkload     string `protobuf:"bytes,13,opt,name=destination_workload,json=destinationWorkload,proto3" json:"destination_workload,omitempty"`
	DestinationWorkloadKind string `protobuf:"bytes,14,opt,name=destination_workload_kind,json=destinationWorkloadKind,proto3" json:"destination_workload_kind,omitempty"`
	// Flow verdict (FORWARDED or DROPPED)
	Verdict string `protobuf:"bytes,15,opt,name=verdict,proto3" json:"verdict,omitempty"`
	// Timestamp of the flow (Unix timestamp in nanoseconds)
	Time int64 `protobuf:"varint,16,opt,name=time,proto3" json:"time,omitempty"`
	// Optional error message if verdict is DROPPED
	DropReason    string `protobuf:"bytes,17,opt,name=drop_reason,json=dropReason,proto3" json:"drop_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_proto_flow_flow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flow_flow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_proto_flow_flow_proto_rawDescGZIP(), []int{0}
}

func (x *Flow) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *Flow) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *Flow) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *Flow) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *Flow) GetL4Protocol() string {
	if x != nil {
		return x.L4Protocol
	}
	return ""
}

func (x *Flow) GetL7Protocol() string {
	if x != nil {
		return x.L7Protocol
	}
	return ""
}

func (x *Flow) GetSourcePod() string {
	if x != nil {
		return x.SourcePod
	}
	return ""
}

func (x *Flow) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *Flow) GetSourceWorkload() string {
	if x != nil {
		return x.SourceWorkload
	}
	return ""
}

func (x *Flow) GetSourceWorkloadKind() string {
	if x != nil {
		return x.SourceWorkloadKind
	}
	return ""
}

func (x *Flow) GetDestinationPod() string {
	if x != nil {
		return x.DestinationPod
	}
	return ""
}

func (x *Flow) GetDestinationNamespace() string {
	if x != nil {
		return x.DestinationNamespace
	}
	return ""
}

func (x *Flow) GetDestinationWorkload() string {
	if x != nil {
		return x.DestinationWorkload
	}
	return ""
}

func (x *Flow) GetDestinationWorkloadKind() string {
	if x != nil {
		return x.DestinationWorkloadKind
	}
	return ""
}

func (x *Flow) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *Flow) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Flow) GetDropReason() string {
	if x != nil {
		return x.DropReason
	}
	return ""
}

// GetFlowsRequest allows filtering the flow stream
type GetFlowsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter flows by namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Filter flows by verdict (FORWARDED or DROPPED)
	Verdict       string `protobuf:"bytes,2,opt,name=verdict,proto3" json:"verdict,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFlowsRequest) Reset() {
	*x = GetFlowsRequest{}
	mi := &file_proto_flow_flow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowsRequest) ProtoMessage() {}

func (x *GetFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flow_flow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowsRequest.ProtoReflect.Descriptor instead.
func (*GetFlowsRequest) Descriptor() ([]byte, []int) {
	return file_proto_flow_flow_proto_rawDescGZIP(), []int{1}
}

func (x *GetFlowsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetFlowsRequest) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

// GetServiceMapRequest configures service map aggregation
type GetServiceMapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Aggregate flows from this namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Time window in seconds to aggregate flows over
	WindowSeconds int32 `protobuf:"varint,2,opt,name=window_seconds,json=windowSeconds,proto3" json:"window_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceMapRequest) Reset() {
	*x = GetServiceMapRequest{}
	mi := &file_proto_flow_flow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceMapRequest) ProtoMessage() {}

func (x *GetServiceMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flow_flow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceMapRequest.ProtoReflect.Descriptor instead.
func (*GetServiceMapRequest) Descriptor() ([]byte, []int) {
	return file_proto_flow_flow_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceMapRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetServiceMapRequest) GetWindowSeconds() int32 {
	if x != nil {
		return x.WindowSeconds
	}
	return 0
}

// ServiceMapEdge represents an edge in the service dependency graph
type ServiceMapEdge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source service information
	SourceService   string `protobuf:"bytes,1,opt,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`
	SourceNamespace string `protobuf:"bytes,2,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	// Destination service information
	DestinationService   string `protobuf:"bytes,3,opt,name=destination_service,json=destinationService,proto3" json:"destination_service,omitempty"`
	DestinationNamespace string `protobuf:"bytes,4,opt,name=destination_namespace,json=destinationNamespace,proto3" json:"destination_namespace,omitempty"`
	// Protocol used (e.g. HTTP, gRPC)
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Number of successful requests
	SuccessfulRequests int32 `protobuf:"varint,6,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`
	// Number of failed requests
	FailedRequests int32 `protobuf:"varint,7,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServiceMapEdge) Reset() {
	*x = ServiceMapEdge{}
	mi := &file_proto_flow_flow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMapEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapEdge) ProtoMessage() {}

func (x *ServiceMapEdge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_flow_flow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapEdge.ProtoReflect.Descriptor instead.
func (*ServiceMapEdge) Descriptor() ([]byte, []int) {
	return file_proto_flow_flow_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceMapEdge) GetSourceService() string {
	if x != nil {
		return x.SourceService
	}
	return ""
}

func (x *ServiceMapEdge) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *ServiceMapEdge) GetDestinationService() string {
	if x != nil {
		return x.DestinationService
	}
	return ""
}

func (x *ServiceMapEdge) GetDestinationNamespace() string {
	if x != nil {
		return x.DestinationNamespace
	}
	return ""
}

func (x *ServiceMapEdge) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ServiceMapEdge) GetSuccessfulRequests() int32 {
	if x != nil {
		return x.SuccessfulRequests
	}
	return 0
}

func (x *ServiceMapEdge) GetFailedRequests() int32 {
	if x != nil {
		return x.FailedRequests
	}
	return 0
}

var File_proto_flow_flow_proto protoreflect.FileDescriptor

const file_proto_flow_flow_proto_rawDesc = "" +
	"\n" +
	"\x15proto/flow/flow.proto\x12\x04flow\"\x99\x05\n" +
	"\x04Flow\x12\x1b\n" +
	"\tsource_ip\x18\x01 \x01(\tR\bsourceIp\x12%\n" +
	"\x0edestination_ip\x18\x02 \x01(\tR\rdestinationIp\x12\x1f\n" +
	"\vsource_port\x18\x03 \x01(\rR\n" +
	"sourcePort\x12)\n" +
	"\x10destination_port\x18\x04 \x01(\rR\x0fdestinationPort\x12\x1f\n" +
	"\vl4_protocol\x18\x05 \x01(\tR\n" +
	"l4Protocol\x12\x1f\n" +
	"\vl7_protocol\x18\x06 \x01(\tR\n" +
	"l7Protocol\x12\x1d\n" +
	"\n" +
	"source_pod\x18\a \x01(\tR\tsourcePod\x12)\n" +
	"\x10source_namespace\x18\b \x01(\tR\x0fsourceNamespace\x12'\n" +
	"\x0fsource_workload\x18\t \x01(\tR\x0esourceWorkload\x120\n" +
	"\x14source_workload_kind\x18\n" +
	" \x01(\tR\x12sourceWorkloadKind\x12'\n" +
	"\x0fdestination_pod\x18\v \x01(\tR\x0edestinationPod\x123\n" +
	"\x15destination_namespace\x18\f \x01(\tR\x14destinationNamespace\x121\n" +
	"\x14destination_workload\x18\r \x01(\tR\x13destinationWorkload\x12:\n" +
	"\x19destination_workload_kind\x18\x0e \x01(\tR\x17destinationWorkloadKind\x12\x18\n" +
	"\averdict\x18\x0f \x01(\tR\averdict\x12\x12\n" +
	"\x04time\x18\x10 \x01(\x03R\x04time\x12\x1f\n" +
	"\vdrop_reason\x18\x11 \x01(\tR\n" +
	"dropReason\"I\n" +
	"\x0fGetFlowsRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x18\n" +
	"\averdict\x18\x02 \x01(\tR\averdict\"[\n" +
	"\x14GetServiceMapRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12%\n" +
	"\x0ewindow_seconds\x18\x02 \x01(\x05R\rwindowSeconds\"\xbe\x02\n" +
	"\x0eServiceMapEdge\x12%\n" +
	"\x0esource_service\x18\x01 \x01(\tR\rsourceService\x12)\n" +
	"\x10source_namespace\x18\x02 \x01(\tR\x0fsourceNamespace\x12/\n" +
	"\x13destination_service\x18\x03 \x01(\tR\x12destinationService\x123\n" +
	"\x15destination_namespace\x18\x04 \x01(\tR\x14destinationNamespace\x12\x1a\n" +
	"\bprotocol\x18\x05 \x01(\tR\bprotocol\x12/\n" +
	"\x13successful_requests\x18\x06 \x01(\x05R\x12successfulRequests\x12'\n" +
	"\x0ffailed_requests\x18\a \x01(\x05R\x0efailedRequests2\x87\x01\n" +
	"\vFlowService\x121\n" +
	"\bGetFlows\x12\x15.flow.GetFlowsRequest\x1a\n" +
	".flow.Flow\"\x000\x01\x12E\n" +
	"\rGetServiceMap\x12\x1a.flow.GetServiceMapRequest\x1a\x14.flow.ServiceMapEdge\"\x000\x01B\x1cZ\x1ahubbleclone/pkg/proto/flowb\x06proto3"

var (
	file_proto_flow_flow_proto_rawDescOnce sync.Once
	file_proto_flow_flow_proto_rawDescData []byte
)

func file_proto_flow_flow_proto_rawDescGZIP() []byte {
	file_proto_flow_flow_proto_rawDescOnce.Do(func() {
		file_proto_flow_flow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_flow_flow_proto_rawDesc), len(file_proto_flow_flow_proto_rawDesc)))
	})
	return file_proto_flow_flow_proto_rawDescData
}

var file_proto_flow_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_flow_flow_proto_goTypes = []any{
	(*Flow)(nil),                 // 0: flow.Flow
	(*GetFlowsRequest)(nil),      // 1: flow.GetFlowsRequest
	(*GetServiceMapRequest)(nil), // 2: flow.GetServiceMapRequest
	(*ServiceMapEdge)(nil),       // 3: flow.ServiceMapEdge
}
var file_proto_flow_flow_proto_depIdxs = []int32{
	1, // 0: flow.FlowService.GetFlows:input_type -> flow.GetFlowsRequest
	2, // 1: flow.FlowService.GetServiceMap:input_type -> flow.GetServiceMapRequest
	0, // 2: flow.FlowService.GetFlows:output_type -> flow.Flow
	3, // 3: flow.FlowService.GetServiceMap:output_type -> flow.ServiceMapEdge
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_flow_flow_proto_init() }
func file_proto_flow_flow_proto_init() {
	if File_proto_flow_flow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_flow_flow_proto_rawDesc), len(file_proto_flow_flow_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_flow_flow_proto_goTypes,
		DependencyIndexes: file_proto_flow_flow_proto_depIdxs,
		MessageInfos:      file_proto_flow_flow_proto_msgTypes,
	}.Build()
	File_proto_flow_flow_proto = out.File
	file_proto_flow_flow_proto_goTypes = nil
	file_proto_flow_flow_proto_depIdxs = nil
}
